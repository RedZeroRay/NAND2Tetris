// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Detect if it is an A(ddress) instruction or a C(ompute) instruction
    DMux(in=true , sel=instruction[15] , a=isaType , b=iscType );
    // Read the c instruction to determine if the output of the ALU goes into the D register
    And(a=iscType , b=instruction[4] , out=cinstruct );

    // Determine if the instruction or the last output of the ALU is fed into the A register
	Mux16(a=instruction, b=outALU, sel=instruction[15], out=toaReg);
    // Create a register and 15 bits to output to addressM
    ARegister(in=toaReg, load=isaType, out=aRegister, out[0..14]=addressM);

    // Determine if to use A register or from Memory
    Mux16(a=aRegister, b=inM, sel=instruction[12], out=inALU);

    // Set up ALU and use control bits from instruction
    ALU(x=dRegister , y=inALU , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM, out=outALU , zr=outZero , ng=outNeg );
    // Determine if it needs to be written to memory
    And(a=iscType , b=instruction[3] , out=writeM );

    // Store in D register
    DRegister(in=outALU , load=cinstruct , out=dRegister );

    // PC Counter
    Or(a=outZero, b=outNeg, out=leqZero);
    Not(in=leqZero, out=outPos);

    And(a=instruction[0] , b=outPos , out=jgt );
    And(a=instruction[1] , b=outZero , out=jeq );
    And(a=instruction[2] , b=outNeg , out=jlt );
    Or(a=jeq , b=jlt , out=jle );
    Or(a=jgt , b=jle , out=jmp );
    And(a=jmp , b=iscType , out=doJump );
    Not(in=doJump , out=noJump );

    PC(in=aRegister , load=doJump , inc=noJump , reset=reset , out[0..14]=pc );
}